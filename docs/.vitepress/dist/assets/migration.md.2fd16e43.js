import{_ as e,c as t,o,a}from"./app.eafd5cec.js";const f=JSON.parse('{"title":"Migrating from v2","description":"","frontmatter":{},"headers":[],"relativePath":"migration.md"}'),r={name:"migration.md"},n=a('<h1 id="migrating-from-v2" tabindex="-1">Migrating from v2 <a class="header-anchor" href="#migrating-from-v2" aria-hidden="true">#</a></h1><p>Version 3 introduces significant changes in how Kanel is configured and unless you ran it with an absolute minimum of customization, you will need to make some adjustments.</p><p>You can see the new type for the configuration object in <a href="../src/Config.ts">Config.ts</a>.</p><p>The nominators have been replaced by <code>getMetadata</code>, <code>getPropertyMetadata</code> and <code>generateIdentifierType</code>. These functions can be configured to return a custom name, comment and other things to customize your output.</p><p>The hooks are more or less intact as <code>postRenderHooks</code>. Those take a path and an array of strings, allowing you to do crude processing if necessary. However, you will probably prefer to create <code>preRenderHooks</code> that operate on more abstract data models and allow you more flexibility.</p><p>The <code>schema.ignore</code> property has been replaced by one general <code>typeFilter</code> function which can filter out any table, view or other entity that you don&#39;t want to process.</p><p>The <code>externalTypesFolder</code> has been removed. Kanel will now assume that all types that are referenced as a simple string are built-in Typescript types (like <code>string</code>, <code>number</code>, <code>Set</code>, etc.). If you want to refer to a type that you created in a different file or that exists in an external package, you need to reference it as a <code>TypeImport</code>. You can do that in tagged comments like this: <code>@type(EmailString, &quot;./models/types/EmailString&quot;, false, true) Email address</code> -- this will import a type called <code>EmailString</code> from a file of the same name in the types folder. It will be imported as a named import.</p>',7),i=[n];function s(c,d,l,p,m,h){return o(),t("div",null,i)}var g=e(r,[["render",s]]);export{f as __pageData,g as default};
