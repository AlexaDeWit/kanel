import{_ as e,c as a,o as s,a as t}from"./app.eafd5cec.js";const f=JSON.parse('{"title":"generateIdentifierType","description":"","frontmatter":{},"headers":[],"relativePath":"generateIdentifierType.md"}'),n={name:"generateIdentifierType.md"},p=t(`<h1 id="generateidentifiertype" tabindex="-1">generateIdentifierType <a class="header-anchor" href="#generateidentifiertype" aria-hidden="true">#</a></h1><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#FFCB6B;">generateIdentifierType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TableColumn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TableDetails</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> TypeDeclaration</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>This function is called for table columns that are marked as primary keys. It can be used to create specific types for such properties. The default implementation creates a <em>branded</em> type which is a Typescript &quot;trick&quot; for creating nominal types.</p>`,3),r=[p];function o(l,c,i,d,y,_){return s(),a("div",null,r)}var C=e(n,[["render",o]]);export{f as __pageData,C as default};
