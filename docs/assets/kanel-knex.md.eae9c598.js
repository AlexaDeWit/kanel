import { _ as s, o as a, c as n, S as e } from "./chunks/framework.cbdddcbb.js";
const A = JSON.parse(
    '{"title":"Knex extension for Kanel","description":"","frontmatter":{},"headers":[],"relativePath":"kanel-knex.md","filePath":"kanel-knex.md"}',
  ),
  l = { name: "kanel-knex.md" },
  o = e(
    `<h1 id="knex-extension-for-kanel" tabindex="-1">Knex extension for Kanel <a class="header-anchor" href="#knex-extension-for-kanel" aria-label="Permalink to &quot;Knex extension for Kanel&quot;">​</a></h1><p>This packages extends <a href="https://github.com/kristiandupont/kanel" target="_blank" rel="noreferrer">Kanel</a> with some <a href="https://knexjs.org" target="_blank" rel="noreferrer">Knex</a> specific features.</p><p>Assuming you already have Kanel installed, add this with</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kanel-knex</span></span></code></pre></div><h2 id="knex-tables" tabindex="-1">knex-tables <a class="header-anchor" href="#knex-tables" aria-label="Permalink to &quot;knex-tables&quot;">​</a></h2><p>Knex supports &quot;implicit&quot; type detection with a declared <code>knex/types/tables</code> module. This package can generate that for you. It&#39;s a pre-render hook called <code>generateKnexTablesModule</code>.</p><p>It will create a file in your output folder called <code>knex-tables.ts</code> which will cover this.</p><p>To use it, add it to your <code>.kanelrc.js</code> file:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> generateKnexTablesModule </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kanel-knex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... your config here.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preRenderHooks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [generateKnexTablesModule]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="type-filter" tabindex="-1">Type Filter <a class="header-anchor" href="#type-filter" aria-label="Permalink to &quot;Type Filter&quot;">​</a></h2><p>If you are using Knex for migrations, you will have two tables in your database called <code>knex_migrations</code> and <code>knex_migrations_lock</code>, which you probably don&#39;t care about and don&#39;t want types for. The <code>knexTypeFilter</code> will remove those for you.</p><p>To use it, add it to your <code>.kanelrc.js</code> file:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> knexTypeFilter </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kanel-knex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... your config here.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">typeFilter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> knexTypeFilter</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>Note that type filters are simple predicates. If you have multiple, they can easily be combined with a function like this:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> combineFilters </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">filters</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    filters</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">every</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">(t))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>You can then use this:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... your config here.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">typeFilter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">combineFilters</span><span style="color:#A6ACCD;">(knexTypeFilter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> someOtherFilter </span><span style="color:#676E95;font-style:italic;">/* ... */</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="migration-check" tabindex="-1">Migration Check <a class="header-anchor" href="#migration-check" aria-label="Permalink to &quot;Migration Check&quot;">​</a></h2><p>However, you might want to check that your code is in sync with the database in terms of migrations, so that the types that your code was compiled with match what the database looks like.</p><p>The <code>generateMigrationCheck</code> pre-render hook will create a file for you that contains a function called <code>validateMigration</code>. This function will check the live database for the <code>knex_migration</code> table and check if it matches what was there when the code was generated.</p><p>To use it, add it to your <code>.kanelrc.js</code> file:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> generateMigrationCheck </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kanel-knex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ... your config here.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">preRenderHooks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [generateMigrationCheck]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div>`,
    22,
  ),
  p = [o];
function t(c, r, i, y, D, C) {
  return a(), n("div", null, p);
}
const d = s(l, [["render", t]]);
export { A as __pageData, d as default };
